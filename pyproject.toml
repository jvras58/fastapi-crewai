[project]
name = "FastAPI-CrewAI"
version = "0.1.0"
description = "Basic CRUD API with FastAPI, SQLAlchemy, and Alembic, integrated with CrewAI and LangChain for advanced AI capabilities."
readme = "README.MD"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.16.5",
    "bcrypt>=4.3.0",
    "crewai>=0.201.1",
    "fastapi>=0.116.1",
    "langchain>=0.3.27",
    "langchain-huggingface>=0.1.0",
    "faiss-cpu>=1.8.0",
    "numpy>=1.24.0",
    "psycopg2-binary>=2.9.0",
    "pydantic-settings>=2.10.1",
    "pydantic[email]>=2.11.10",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "requests>=2.32.5",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.35.0",
    "langchain-community>=0.3.30",
    "pymupdf>=1.26.4",
    "sentence-transformers>=5.1.1",
    "embedchain>=0.0.18",
    "crewai-tools>=0.75.0",
]
[tool.setuptools.packages.find]
where = ["apps"]

[dependency-groups]
dev = [
    "blue>=0.9.1",
    "commitizen>=4.9.1",
    "factory-boy>=3.3.3",
    "httpx>=0.28.1",
    "isort>=6.0.1",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-env>=1.1.5",
    "ruff>=0.13.0",
    "taskipy>=1.14.1",
]
# uv run (commands) sample = uv run pytest -s -x --cov=apps -vv
[tool.taskipy.tasks]
lint = "ruff check . && blue --check . --diff"
format = "blue . && isort ."
imports = "isort ."
blue = "blue ."
run = "uvicorn apps.core.startup:app --host 0.0.0.0 --port 8000 --reload"
pre_test = "task lint"
test = "pytest -s -x --cov=apps -vv"
post_test = "coverage html"
export_libs = "uv pip freeze > requirements.txt"
migrate = "alembic upgrade head"
automate_migrations = "./scripts/migrate.sh"
seed_super_user = "python -m seeds.seed_super_user"
seed_transactions = "python -m seeds.seed_transactions"
setup_db = "alembic upgrade head && python -m seeds.seed_transactions && python -m seeds.seed_super_user"

[tool.isort]
profile = "black"
line_length = 88
extend_skip = ["migrations"]

[tool.uv]
package = true

[tool.pylsp-mypy]
exclude = ["tests/"]

[tool.pyright]
exclude = ["tests/"]

[tool.ruff]
line-length = 88
exclude = [".venv", "migrations"]

[tool.ruff.lint]
select = ["E", "F", "I", "W", "UP", "B", "SIM"]
ignore = ["UP046"]  # Ignore Generic subclass rule for compatibility with blue formatter

[tool.coverage.run]
source = ["apps"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
# NOTA: omitido pois o pymupdf(importlib._bootstrap,SwigPyPacked, SwigPyObject e swigvarlink) gera issue fechada: https://github.com/pymupdf/PyMuPDF/issues/3931
# NOTA: omitido pois o Pydantic está conflitando com o CrewAI/LangChain (https://github.com/langflow-ai/langflow/issues/7462)
# NOTA: CrewAI v0.201.1 tem um bug conhecido no Windows que causa "ValueError: I/O operation on closed file" durante pytest cleanup (não afeta funcionalidade)
[tool.pytest.ini_options]
env = [
    "CREWAI_DISABLE_TRACING=true",
    "CREWAI_LOG_LEVEL=ERROR",
    "OTEL_SDK_DISABLED=true",
    "PYTHONDONTWRITEBYTECODE=1"
]
addopts = "--tb=short --disable-warnings"
filterwarnings = [
    "ignore::DeprecationWarning:importlib._bootstrap",
    "ignore:builtin type SwigPyPacked has no __module__ attribute:DeprecationWarning",
    "ignore:builtin type SwigPyObject has no __module__ attribute:DeprecationWarning", 
    "ignore:builtin type swigvarlink has no __module__ attribute:DeprecationWarning",
    "ignore:Pydantic serializer warnings:UserWarning",
    "ignore:Expected.*fields but got.*Expected.*Message.*serialized value may not be as expected:UserWarning",
    "ignore:Exception in thread.*get_input:pytest.PytestUnhandledThreadExceptionWarning",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
